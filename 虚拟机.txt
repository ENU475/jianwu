栈： 存储方法参数、局部变量、中间运算结果，并且提供部分其它模块工作需要的数据。Java栈是与线程对应起来的，Java栈数据不是线程共有的。
   栈帧：栈帧是与每个方法关联起来的，每运行一个方法就创建一个栈帧，
		局部变量区：	方法参数和局部变量，此外，实例方法隐含第一个局部变量this
		操作数栈：	 	在进行计算时，操作数被弹出栈，计算完毕后再入栈。
		帧数据区：		其他
本地方法栈： 			类似于Java栈，主要存储了本地方法调用的状态。区别不过是Java栈为JVM执行Java方法服务，而本地方法栈为JVM执行Native方法服务。
程序计数器：			用于保存当前正在执行的程序的内存地址，为了线程切换后能恢复到正确的执行位置，每个线程都需要有一个独立的程序计数器，各个线程之间计数器互不影响
方法区：				方法区是所有线程共享的，所以必须保证线程安全。加载的.class文件就在方法区，保存了类的所有信息。
		常量池 ：		常量池本身是方法区中的一个数据结构。常量池中存储了如字符串、final变量值、类名和方法名常量。
				字面量：	字符串、final变量等
				引用量：	类名和方法名
		
堆   ： 堆用于存储对象实例以及数组值。所有线程共享。
	垃圾管理方式：
				新生代：	新对象都被分配在新生代中
				老年代		在新生代中存活时间较久的对象将会被转入老年代
执行引擎：是JVM执行Java字节码的核心，执行方式主要分为解释执行、编译执行、自适应优化执行、硬件芯片执行方式。
类加载器 ：负责加载编译好的.class字节码文件，并装入内存，使JVM可以实例化或以其它方式使用加载后的类。
		分类：	启动类加载器
				扩展类加载器
				系统类加载器
				用户自定义类加载器

		工作原理：
				装载：  	通过类的全限定名和ClassLoader加载类，主要是将指定的.class文件加载至JVM。
				链接：		二进制的类型信息合并到JVM运行时状态中去。 
				初始化：	初始化类中的静态变量，并执行类中的static代码、构造函数。 
					
					
					
					
					
					